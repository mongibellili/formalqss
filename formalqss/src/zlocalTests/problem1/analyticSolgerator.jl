using LinearAlgebra

function generateSol(A::Array{Float64, 2},u::Vector{Float64},x10::Float64,x20::Float64)
    xp=-inv(A)*u
    V=eigvecs(A)
    λ=eigvals(A)
    @show λ[1],λ[2]
    V1=V[1]/V[2] 
    V2=V[3]/V[4] 
    @show V1,V2
    c2=(x10-xp[1]-(x20-xp[2])*V1)/(V2-V1)
    c1=x20-xp[2]-c2
    @show xp[1],xp[2]
    @show c1,c2
end

#init cond 
x10=-1.0;x20=-2.0
u=[0.75,4.0]
println("-----------------C1------------")
C1 = [-1.1 1.0; 1.0 -1.0]
generateSol(C1,C,x10,x20)

println("-----------------C2------------")
C2 = [-1.1 -1.0; -1.0 -1.0]
generateSol(C2,C,x10,x20)

  #################################SYS A2 ###########################
#= A2 = [0.0 0.01; -100.0 -100.0]
#init cond 
x10=1.0;x20=0.0

println("-----------------A2------------")
b2=[0.0,2020.0]
generateSol(A2,b2,x10,x20) =#
#= -----------------A2------------
(λ[1], λ[2]) = (-99.98999899979995, -0.010001000200048793)
(V1, V2) = (-0.00010001000200050016, -0.9998999899979997)
(xp[1], xp[2]) = (20.2, 0.0)
(c1, c2) = (-19.203841152384133, 19.203841152384133) =#